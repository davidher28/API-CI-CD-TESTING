name: Deploy Stage
run-name: Deploy Stage - ${{ github.ref }}

on:
  push:
    branches:
      - main

env:
  APP_NAME: hello-world
  APP_PORT: 8080
  OPENSHIFT_NAMESPACE: davidher28-dev

jobs:
  # ------------------------------- Commit Stage ------------------------------- #
  commit_stage:
    name: Commit Stage
    uses: ./.github/workflows/commit-stage.yaml

  # ------------------------------- Integration Tests ------------------------------- #
  integration_test:
    runs-on: ubuntu-22.04
    needs: commit_stage
    name: Integration Test
    steps:
      - uses: actions/checkout@v4

      - name: Restore cache from the build stage
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install cached dependencies
        id: restore-dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Integration Testing with pytest
        run: pytest app/tests/integration/

  # ------------------------------- Container Versioning ------------------------------- #
  publish:
    runs-on: ubuntu-22.04
    needs: integration_test
    name: Publish Container
    outputs:
      old_tag: ${{ steps.tagging.outputs.tag }}
      new_tag: ${{ steps.tagging.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Bump Application Version and Push Tag
        id: tagging
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DRY_RUN: true

      - name: Login to Docker Hub
        id: docker_login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Image to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/fastapi:${{ steps.tagging.outputs.new_tag }}

      - name: Docker Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  # ------------------------------- Red Hat OpenShift Deployment ------------------------------- #
  deployment:
    runs-on: ubuntu-22.04
    needs: publish
    name: Deploy Container
    outputs:
      route: ${{ steps.deploy-and-expose.outputs.route }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to OpenShift
        id: oc_login
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Create and expose app
        id: deploy-and-expose
        uses: redhat-actions/oc-new-app@v1
        env:
          IMAGE_REPOSITORY: ${{ vars.DOCKERHUB_USERNAME }}
          IMAGE_TAG: ${{ needs.publish.outputs.new_tag }}
        with:
          app_name: ${{ env.APP_NAME }}
          image: docker.io/${{ vars.DOCKERHUB_USERNAME }}/fastapi:${{ need.publish.outputs.new_tag }}
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          port: ${{ env.APP_PORT }}

      - name: View application route
        id: view_application_route
        env:
          ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
          SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
        run: |
          [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
          echo "======================== The application is available at: ========================"
          echo ${{ env.ROUTE }}
          echo "==================================================================================="
          echo
          echo "It can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""

  deployment_test:
    runs-on: ubuntu-22.04
    needs: deployment
    name: Deployment Test
    steps:
      - uses: actions/checkout@v4

      # ------------------------------- Deployment Test ------------------------------- #
      - name: Test application deployment
        id: test_deploy
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 3
          retry_wait_seconds: 10
          max_attempts: 30
          warning_on_retry: false
          command: curl -sSfL ${{ needs.deployment.outputs.route }}
